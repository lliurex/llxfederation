#!/usr/bin/env python3
import sys
from llxfederation.ad import Ldap   # pyright: ignore[reportMissingImports]
from llxfederation.user import User  # pyright: ignore[reportMissingImports]
from llxfederation.federation import Federation   # pyright: ignore[reportMissingImports]
from llxfederation.adi import Adi   # pyright: ignore[reportMissingImports]
from n4d.client import Client   # pyright: ignore[reportMissingImports]
from n4d.client import CallFailedError   # pyright: ignore[reportMissingImports]


class GvaGate:

    group_schemas_name = "https://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid"

    def __init__(self, args) -> None:
        self.supported_methods = ["id", "adi", "cdc"]
        if len(args) > 2:
            self.user = args[0]
            self.password = args[1]
            self.method = args[2]
        elif len(args) == 2:
            self.user = args[0]
            self.password = args[1]
            self.method = "id"
        else:
            sys.exit(13)  # Bad arguments
        '''
        if len(self.user.split("@")) < 2:
            if "." in self.user:
                self.user = self.user + "@{}".format(self.config["global_domain"])
            else:
                self.user = self.user + "@{}.{}".format(self.config["student_domain_prefix"],self.config["global_domain"])
        '''


    def process_exit_error(self, error):
        if error == "":
            return
        list_errors = {
                "invalid_client": 12,
                "invalid_grant": 4,
                "temporary_unavailable": 10,
                "interaction_required": 5,
                "undefined_error": 20,
                "unsupported_method": 13,
                "invalid response": 11
                }
        if error in list_errors:
            sys.exit(list_errors[error])

    def auth_cdc(self):
        ldap_provider = Ldap()
        user, error = ldap_provider.auth_cdc(self.user, self.password)
        if error is not None:
            self.process_exit_error(error)
        self.sync_with_adi('cdc')
        return user

    def auth_federation(self):
        f_provider = Federation()
        user, error = f_provider.auth_federation(self.user, self.password)
        if error is not None:
            self.process_exit_error(error)
        self.sync_with_adi('id')
        return user

    def auth_adi(self):
        a_provider = Adi()
        user, error = a_provider.auth_adi(self.user, self.password)
        if error is not None:
            self.process_exit_error(error)
        return user

    def sync_with_adi(self, method):
        n4d_local = Client("https://localhost:9779")
        try:
            server = n4d_local.get_variable('SRV_IP')
        except Exception:
            server = None
        if server is not None:
            n4d_remote = Client("https://"+server+":9779")
            try:
                n4d_remote.GvaGate.store_id_user(self.user, self.password, method)
            except Exception:
                pass

    def run(self):
        m = self.method.lower()
        if m not in self.supported_methods:
            self.process_exit_error("unsupported_method")
        if m == "id":
            user = self.auth_federation()
        elif m == "adi":
            user = self.auth_adi()
        elif m == "cdc":
            user = self.auth_cdc()
        else:
            return
        print(user)


if __name__ == "__main__":
    linea = sys.stdin.readline()
    args = linea.strip().split(" ")
    g = GvaGate(args)
    g.run()
